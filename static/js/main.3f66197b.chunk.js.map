{"version":3,"sources":["components/Bar.js","BubbleSort.js","QuickSort.js","SelectionSort.js","InsertionSort.js","HeapSort.js","App.js","CountingSort.js","index.js"],"names":["Bar","props","color","style","height","width","backgroundColor","className","BubbleSort","randomArr","randomArray","bubbleArray","speedSort","useState","items","setItems","isTrue","setIsTrue","iteratorA","setIteratorA","iteratorB","setIteratorB","sleep","ms","Promise","resolve","setTimeout","a","len","length","swapped","i","tmp","finishFunction","useEffect","start","display","speed","bubbleSort","margin","map","progress","index","QuickSort","quickArray","swap","leftIndex","rightIndex","k","temp","partition","left","right","pivot","Math","floor","j","quickSort","fast","Number","alert","SelectionSort","selectionArray","min","selectionSort","InsertionSort","insertionArray","key","insertionSort","HeapSort","array_length","heapArray","heap_root","input","max","index_A","index_B","heapSort","CountingSort","countingArray","arr","count","countingSort","mainArray","push","random","App","Speed","setSpeed","mainArr","setMainArr","allSortDisplay","setAllSortDisplay","bubbleDisplay","setBubbleDisplay","quickDisplay","setQuickDisplay","insertionDisplay","setInsertionDisplay","countingDisplay","setCountingDisplay","heapDisplay","setHeapDisplay","selectionDisplay","setSelectionDisplay","resetArrayHandler","resetArray","finishSort","value","href","onClick","onAfterChange","for","name","padding","allSortWidth","sortWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f66197b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/bar.css';\r\n\r\n\r\n\r\n  \r\nfunction Bar(props) {\r\n  const color = props.color;\r\n\r\n  return (\r\n    <ol  style={{ height:props.height + \"%\" , width: 1+ \"%\" ,  backgroundColor: color }} className=\"Bar\">\r\n        \r\n    </ol>\r\n  );\r\n}\r\n\r\nexport default Bar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Sort.css\";\r\nimport Bar from \"./components/Bar\";\r\n\r\nfunction BubbleSort(props) {\r\n  let randomArr = [...props.randomArray];\r\n  let bubbleArray = [...randomArr];\r\n  let speedSort = 1000;\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [isTrue, setIsTrue] = useState(false);\r\n  const [iteratorA , setIteratorA] = useState();\r\n  const [iteratorB , setIteratorB] = useState();\r\n\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async function bubbleSort() {\r\n    let len = bubbleArray.length;\r\n    let swapped;\r\n\r\n    do {\r\n      swapped = false;\r\n\r\n      for (let i = 0; i < len; i++) {\r\n        if (bubbleArray[i] > bubbleArray[i + 1]) {\r\n          let tmp = bubbleArray[i];\r\n          bubbleArray[i] = bubbleArray[i + 1];\r\n          bubbleArray[i + 1] = tmp;\r\n          swapped = true;\r\n          setIteratorA(i);\r\n          setIteratorB(i+1);        \r\n          setItems([...bubbleArray]);\r\n          await sleep(speedSort);\r\n\r\n\r\n        }\r\n\r\n      }\r\n    } while (swapped);\r\n    props.finishFunction(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    randomArr = [...props.randomArray];\r\n    bubbleArray = [...randomArr];\r\n    setItems([...randomArr]);\r\n  }, [props.randomArray, isTrue]);\r\n\r\n  useEffect(() => {\r\n    setIsTrue(!isTrue);\r\n    if ((props.start == true) && (props.display == true)) {\r\n      speedSort /= props.speed;\r\n      bubbleSort();\r\n    }\r\n  }, [props.start]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: props.margin,\r\n      }}\r\n      className=\"Box\"\r\n    >\r\n      <h4 className=\"Title\"> Bubble Sort</h4>\r\n      <div\r\n        style={{\r\n          height: props.height + \"px\",\r\n        }}\r\n        className=\"Column\"\r\n      >\r\n        {items.map((progress,index) => (\r\n          <Bar color = {(index===iteratorA || index===iteratorB) ? 'red' : 'blue'}  height={progress} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BubbleSort;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Sort.css\";\r\nimport Bar from \"./components/Bar\";\r\n\r\nfunction QuickSort(props) {\r\n  let randomArr = [...props.randomArray];\r\n  let quickArray = [...randomArr];\r\nlet speedSort;\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [isTrue, setIsTrue] = useState(false);\r\n  const [iteratorA , setIteratorA] = useState();\r\n  const [iteratorB , setIteratorB] = useState();\r\n\r\n\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  function wait(ms) {\r\n    var start = new Date().getTime();\r\n    var end = start;\r\n    while (end < start + ms) {\r\n      end = new Date().getTime();\r\n    }\r\n  }\r\n\r\n  async function swap(items, leftIndex, rightIndex, k) {\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n    await sleep(speedSort);\r\n    setIteratorA(leftIndex);\r\n    setIteratorB(rightIndex);  \r\n\r\n    setItems([...items]);\r\n  }\r\n  async function partition(items, left, right) {\r\n    var k = 0;\r\n    var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n      i = left, //left pointer\r\n      j = right; //right pointer\r\n\r\n    while (i <= j) {\r\n      k++;\r\n\r\n      while (items[i] < pivot) {\r\n        i++;\r\n      }\r\n      while (items[j] > pivot) {\r\n        j--;\r\n      }\r\n      if (i <= j) {\r\n        await swap(items, i, j, k);\r\n        i++;\r\n        j--;\r\n      }\r\n    }\r\n\r\n    return i;\r\n  }\r\n\r\n  async function quickSort(items, left, right) {\r\n    var index;\r\n    if (items.length > 1) {\r\n      index = await partition(items, left, right); //index returned from partition\r\n\r\n      if (left < index - 1) {\r\n        //more elements on the left side of the pivot\r\n        quickSort(items, left, index - 1);\r\n      }\r\n      if (index < right) {\r\n        //more elements on the right side of the pivot\r\n        quickSort(items, index, right);\r\n      }\r\n    }\r\n    return items;\r\n  }\r\n\r\n  useEffect(() => {\r\n    randomArr = [...props.randomArray];\r\n    quickArray = [...randomArr];\r\n\r\n    setItems([...randomArr]);\r\n  }, [props.randomArray, isTrue]);\r\n\r\n  useEffect(() => {\r\n    if ((props.start == true) && (props.display == true)) {\r\n      const fast = Number(props.speed);\r\n      speedSort = 2000 / fast;\r\n      alert(speedSort)\r\n\r\n      quickSort(quickArray, 0, quickArray.length - 1);\r\n    }\r\n  }, [props.start]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: props.margin,\r\n      }}\r\n      className=\"Box\"\r\n    >\r\n      <h4 className=\"Title\"> Quick Sort</h4>\r\n\r\n      <div\r\n        style={{\r\n          height: props.height + \"px\",\r\n        }}\r\n        className=\"Column\"\r\n      >\r\n        {items.map((progress,index) => (\r\n          <Bar color = {(index===iteratorA || index===iteratorB) ? 'red' : 'blue'} height={progress} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuickSort;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Sort.css\";\r\nimport Bar from \"./components/Bar\";\r\n\r\nfunction SelectionSort(props) {\r\n  let randomArr = [...props.randomArray];\r\n  let selectionArray = [...randomArr];\r\n  let speedSort = 1000;\r\n\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [isTrue, setIsTrue] = useState(false);\r\n  const [iteratorA , setIteratorA] = useState();\r\n  const [iteratorB , setIteratorB] = useState();\r\n\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async function selectionSort() {\r\n    let len = selectionArray.length;\r\n    for (let i = 0; i < len; i++) {\r\n      let min = i;\r\n      for (let j = i + 1; j < len; j++) {\r\n        if (selectionArray[min] > selectionArray[j]) {\r\n          min = j;\r\n        }\r\n      }\r\n      if (min !== i) {\r\n        let tmp = selectionArray[i];\r\n        selectionArray[i] = selectionArray[min];\r\n        selectionArray[min] = tmp;\r\n        await sleep(speedSort);\r\n        setIteratorA(i);\r\n        setIteratorB(min);  \r\n        setItems([...selectionArray]);\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    randomArr = [...props.randomArray];\r\n    selectionArray = [...randomArr];\r\n\r\n    setItems([...randomArr]);\r\n  }, [props.randomArray, isTrue]);\r\n\r\n  useEffect(() => {\r\n    if ((props.start == true)  && (props.display == true)){\r\n      speedSort /= props.speed;\r\n\r\n      selectionSort();\r\n    }\r\n  }, [props.start]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: props.margin,\r\n      }}\r\n      className=\"Box\"\r\n    >\r\n      <h4 className=\"Title\"> Selection Sort</h4>\r\n\r\n      <div\r\n        style={{\r\n          height: props.height + \"px\",\r\n        }}\r\n        className=\"Column\"\r\n      >\r\n        {items.map((progress,index) => (\r\n          <Bar  color = {(index===iteratorA || index===iteratorB) ? 'red' : 'blue'} height={progress} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectionSort;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Sort.css\";\r\nimport Bar from \"./components/Bar\";\r\n\r\nfunction InsertionSort(props) {\r\n  let randomArr = [...props.randomArray];\r\n  let insertionArray = [...randomArr];\r\n  let speedSort = 1000;\r\n\r\n\r\n  const [iteratorA , setIteratorA] = useState();\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [isTrue, setIsTrue] = useState(false);\r\n\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async function insertionSort() {\r\n    let len = insertionArray.length;\r\n    for (let i = 1; i < len; i++) {\r\n      let key = insertionArray[i];\r\n      let j = i - 1;\r\n      while (j >= 0 && insertionArray[j] > key) {\r\n        insertionArray[j + 1] = insertionArray[j];\r\n        setIteratorA(j+1);\r\n    \r\n        setItems([...insertionArray]);\r\n\r\n        await sleep(speedSort);\r\n        j = j - 1;\r\n      }\r\n      insertionArray[j + 1] = key;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    randomArr = [...props.randomArray];\r\n    insertionArray = [...randomArr];\r\n\r\n    setItems([...randomArr]);\r\n  }, [props.randomArray, isTrue]);\r\n\r\n  useEffect(() => {\r\n    if ((props.start == true) && (props.display == true)) {\r\n      speedSort /= props.speed;\r\n\r\n      insertionSort();\r\n    }\r\n  }, [props.start]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: props.margin,\r\n      }}\r\n      className=\"Box\"\r\n    >\r\n      <h4 className=\"Title\"> Insertion Sort</h4>\r\n\r\n      <div\r\n        style={{\r\n          height: props.height + \"px\",\r\n        }}\r\n        className=\"Column\"\r\n      >\r\n        {items.map((progress,index) => (\r\n          <Bar color = {(index===iteratorA) ? 'red' : 'blue'}  height={progress} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InsertionSort;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Sort.css\";\r\nimport Bar from \"./components/Bar\";\r\n\r\nfunction HeapSort(props) {\r\n  let randomArr = [...props.randomArray];\r\n  let heapArray = [...randomArr];\r\n  let speedSort = 1000;\r\n\r\n  const [iteratorA , setIteratorA] = useState();\r\n  const [iteratorB , setIteratorB] = useState();\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [isTrue, setIsTrue] = useState(false);\r\n\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  function wait(ms) {\r\n    var start = new Date().getTime();\r\n    var end = start;\r\n    while (end < start + ms) {\r\n      end = new Date().getTime();\r\n    }\r\n  }\r\n\r\n  var array_length;\r\n  async function heap_root(input, i) {\r\n    var left = 2 * i + 1;\r\n    var right = 2 * i + 2;\r\n    var max = i;\r\n\r\n    if (left < array_length && input[left] > input[max]) {\r\n      max = left;\r\n    }\r\n\r\n    if (right < array_length && input[right] > input[max]) {\r\n      max = right;\r\n    }\r\n\r\n    if (max != i) {\r\n      await swap(input, i, max);\r\n      await heap_root(input, max);\r\n    }\r\n  }\r\n\r\n  async function swap(input, index_A, index_B) {\r\n    var temp = input[index_A];\r\n\r\n    input[index_A] = input[index_B];\r\n    input[index_B] = temp;\r\n    setIteratorA(index_A);\r\n    setIteratorB(index_B);  \r\n    setItems([...input]);\r\n    await sleep(speedSort);\r\n  }\r\n\r\n  async function heapSort(input) {\r\n    array_length = input.length;\r\n\r\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1) {\r\n      await heap_root(input, i);\r\n    }\r\n\r\n    for (i = input.length - 1; i > 0; i--) {\r\n      await swap(input, 0, i);\r\n      array_length--;\r\n\r\n      await heap_root(input, 0);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    randomArr = [...props.randomArray];\r\n    heapArray = [...randomArr];\r\n\r\n    setItems([...randomArr]);\r\n  }, [props.randomArray, isTrue]);\r\n\r\n  useEffect(() => {\r\n    if ((props.start == true) && (props.display == true)) {\r\n      speedSort /= props.speed;\r\n      heapSort(heapArray);\r\n    }\r\n  }, [props.start]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: props.margin,\r\n      }}\r\n      className=\"Box\"\r\n    >\r\n      <h4 className=\"Title\"> Heap Sort</h4>\r\n\r\n      <div\r\n        style={{\r\n          height: props.height + \"px\",\r\n        }}\r\n        className=\"Column\"\r\n      >\r\n        {items.map((progress,index) => (\r\n          <Bar color = {(index===iteratorA || index===iteratorB) ? 'red' : 'blue'}  height={progress} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeapSort;\r\n","import React, { useState, useEffect } from \"react\";\nimport Slider, { Range } from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"./css/App.css\";\nimport BubbleSort from \"./BubbleSort\";\nimport QuickSort from \"./QuickSort\";\nimport MergeSort from \"./MergeSort\";\nimport SelectionSort from \"./SelectionSort\";\nimport InsertionSort from \"./InsertionSort\";\nimport HeapSort from \"./HeapSort\";\nimport CountingSort from \"./CountingSort\";\n\n/*\n    const setSpeedUpHandler = () =>{\n    if(Speed == 10){\n      setSpeed(\"Maximum Speed\")\n\n    }\n    else if(Speed == \"Minimum Speed\"){\n      setSpeed(1)\n    }else if(Speed == \"Maximum Speed\"){\n\n    }else{\n      setSpeed(Speed+1)\n    }\n  }\n  const setSpeedDownHandler = () =>{\n    if(Speed == \"Maximum Speed\"){\n      setSpeed(10);\n\n    }\n    else if(Speed == 1){\n      setSpeed(\"Minimum Speed\")\n    }\n    else if(Speed == \"Minimum Speed\"){\n\n    }else{\n      setSpeed(Speed-1)\n    }\n  }\n\n      ----\n\n    <div className=\"splitButtonRowRight\">\n          <a className=\"Button\" href=\"#\" onClick={() => setSpeedUpHandler()}>\n            Speed up\n          </a>\n          <a className=\"Button\" href=\"#\" onClick={() => setSpeedDownHandler()}>\n            Speed down\n          </a>\n          <div className=\"Speed\">Current Speed {Speed} x</div>\n        </div>\n\n\n  */\nconst ARRAY_LENGTH = 75;\nvar mainArray = [];\nconst allSortHeight = 300;\nconst allSortWidth = 30;\nconst allSortPadding = 1.5 + \"%\";\nconst sortHeight = 500;\nconst sortWidth = 100;\nconst sortPadding = 3 + \"%\";\n\nconst visible = \"visible\";\nfor (let i = 0; i < ARRAY_LENGTH; i++) {\n  mainArray.push(Math.floor(Math.random() * 100));\n}\n\nfunction App() {\n  const [isTrue, setIsTrue] = useState(false);\n  const [Speed, setSpeed] = useState(10);\n  const [mainArr, setMainArr] = useState([...mainArray]);\n\n  const [allSortDisplay, setAllSortDisplay] = useState(false);\n  const [bubbleDisplay, setBubbleDisplay] = useState(true);\n  const [quickDisplay, setQuickDisplay] = useState(false);\n  const [insertionDisplay, setInsertionDisplay] = useState(false);\n  const [countingDisplay, setCountingDisplay] = useState(false);\n  const [heapDisplay, setHeapDisplay] = useState(false);\n  const [selectionDisplay, setSelectionDisplay] = useState(false);\n\n  const resetArrayHandler = () => {\n    if (isTrue === false) {\n      const resetArray = [];\n      for (let i = 0; i < ARRAY_LENGTH; i++) {\n        resetArray.push(Math.floor(Math.random() * 100));\n      }\n      setMainArr([...resetArray]);\n    }\n  };\n  const finishSort = (value) => {\n    setIsTrue(false);\n    resetArrayHandler();\n    setIsTrue(false);\n  };\n  const onSliderChange = (value) => {\n    setSpeed(value);\n  };\n\n  const displayHandler = (currentSort) => {\n    if (currentSort === \"reset\") {\n      setAllSortDisplay(false);\n\n      setBubbleDisplay(false);\n      setCountingDisplay(false);\n      setHeapDisplay(false);\n\n      setQuickDisplay(false);\n\n      setInsertionDisplay(false);\n      setSelectionDisplay(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"buttonRow\">\n        <div className=\"splitButtonRowLeft\">\n          <a className=\"Button\" href=\"#\" onClick={() => setIsTrue(true)}>\n            Start\n          </a>\n          <a className=\"Button\" href=\"#\" onClick={() => resetArrayHandler()}>\n            Generate New Random Array\n          </a>\n        </div>\n        <div className=\"splitButtonRowMiddle\">\n          <div className=\"Button\">Change Sorting Speed</div>\n          <div>\n            <Slider\n              onAfterChange={onSliderChange}\n              style={{ margin: 7, width: 200, height: 10 }}\n              min={10}\n              max={200}\n            />\n          </div>\n        </div>\n        <div className=\"splitButtonRowRight\">\n          <label className=\"labelSort\" for=\"sorts\">\n            Select sorting method:\n          </label>\n          <select name=\"sorts\" className=\"sortSelect\">\n            <option onClick={() => setBubbleDisplay(!bubbleDisplay)}>\n              Bubble Sort\n            </option>\n\n            <option onClick={() => setQuickDisplay(!quickDisplay)}>\n              Quick Sort\n            </option>\n            <option onClick={() => setSelectionDisplay(!selectionDisplay)}>\n              Selection Sort\n            </option>\n            <option onClick={() => setInsertionDisplay(!insertionDisplay)}>\n              Insertion Sort\n            </option>\n            <option onClick={() => setHeapDisplay(!heapDisplay)}>\n              Heap Sort\n            </option>\n            <option onClick={() => setCountingDisplay(!countingDisplay)}>\n              Counting Sort\n            </option>\n            <option onClick={() => setAllSortDisplay(!allSortDisplay)}>\n              Show All Sorts\n            </option>\n            <option onClick={() => displayHandler(\"reset\")}>Reset</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"Sorts\">\n        <div\n          style={{\n            display: allSortDisplay ? \"flex\" : \"none\",\n          }}\n          className=\"allSorts\"\n        >\n          <div\n            style={{\n              padding: allSortPadding,\n              height: allSortHeight,\n              width: allSortWidth + \"%\",\n            }}\n            className=\"bubbleSort\"\n          >\n            <BubbleSort\n              finishFunction={finishSort}\n              height={allSortHeight}\n              randomArray={mainArr}\n              start={isTrue}\n              speed={Speed}\n              display={allSortDisplay}\n            />\n          </div>\n\n          <div\n            style={{\n              padding: allSortPadding,\n              height: allSortHeight,\n              width: allSortWidth + \"%\",\n            }}\n            className=\"quickSort\"\n          >\n            <QuickSort\n              height={allSortHeight}\n              display={allSortDisplay}\n              randomArray={mainArr}\n              start={isTrue}\n              speed={Speed}\n            />\n          </div>\n          <div\n            style={{\n              padding: allSortPadding,\n              height: allSortHeight,\n              width: allSortWidth + \"%\",\n            }}\n            className=\"selectionSort\"\n          >\n            <SelectionSort\n              display={allSortDisplay}\n              height={allSortHeight}\n              randomArray={mainArr}\n              start={isTrue}\n              speed={Speed}\n            />\n          </div>\n          <div\n            style={{\n              padding: allSortPadding,\n              height: allSortHeight,\n              width: allSortWidth + \"%\",\n            }}\n            className=\"insertionSort\"\n          >\n            <InsertionSort\n              display={allSortDisplay}\n              height={allSortHeight}\n              randomArray={mainArr}\n              start={isTrue}\n              speed={Speed}\n            />\n          </div>\n          <div\n            style={{\n              padding: allSortPadding,\n              height: allSortHeight,\n              width: allSortWidth + \"%\",\n            }}\n            className=\"heapSort\"\n          >\n            <HeapSort\n              display={allSortDisplay}\n              height={allSortHeight}\n              randomArray={mainArr}\n              start={isTrue}\n              speed={Speed}\n            />\n          </div>\n          <div\n            style={{\n              padding: allSortPadding,\n              height: allSortHeight,\n              width: allSortWidth + \"%\",\n              display: \"visible\",\n            }}\n            className=\"countingSort\"\n          >\n            <CountingSort\n              display={allSortDisplay}\n              height={allSortHeight}\n              randomArray={mainArr}\n              start={isTrue}\n              speed={Speed}\n            />\n          </div>\n        </div>\n\n        <div\n          style={{\n            height: sortHeight,\n            width: sortWidth + \"%\",\n            padding: sortPadding,\n            display: bubbleDisplay ? \"block\" : \"none\",\n          }}\n        >\n          <BubbleSort\n            margin=\"auto\"\n            finishFunction={finishSort}\n            speed={Speed}\n            display={bubbleDisplay}\n            height={sortHeight}\n            randomArray={mainArr}\n            start={isTrue}\n          />\n        </div>\n\n        <div\n          style={{\n            height: sortHeight,\n            width: sortWidth + \"%\",\n            padding: sortPadding,\n\n            display: quickDisplay ? \"block\" : \"none\",\n          }}\n          className=\"quickSort\"\n        >\n          <QuickSort\n            margin=\"auto\"\n            speed={Speed}\n            display={quickDisplay}\n            height={sortHeight}\n            randomArray={mainArr}\n            start={isTrue}\n          />\n        </div>\n        <div\n          style={{\n            height: sortHeight,\n            width: sortWidth + \"%\",\n            padding: sortPadding,\n\n            display: selectionDisplay ? \"block\" : \"none\",\n          }}\n          className=\"selectionSort\"\n        >\n          <SelectionSort\n            margin=\"auto\"\n            speed={Speed}\n            display={selectionDisplay}\n            height={sortHeight}\n            randomArray={mainArr}\n            start={isTrue}\n          />\n        </div>\n        <div\n          style={{\n            height: sortHeight,\n            width: sortWidth + \"%\",\n            padding: sortPadding,\n\n            display: insertionDisplay ? \"block\" : \"none\",\n          }}\n          className=\"insertionSort\"\n        >\n          <InsertionSort\n            margin=\"auto\"\n            speed={Speed}\n            display={insertionDisplay}\n            height={sortHeight}\n            randomArray={mainArr}\n            start={isTrue}\n          />\n        </div>\n        <div\n          style={{\n            height: sortHeight,\n            width: sortWidth + \"%\",\n            padding: sortPadding,\n\n            display: heapDisplay ? \"block\" : \"none\",\n          }}\n          className=\"heapSort\"\n        >\n          <HeapSort\n            margin=\"auto\"\n            speed={Speed}\n            display={heapDisplay}\n            height={sortHeight}\n            randomArray={mainArr}\n            start={isTrue}\n          />\n        </div>\n        <div\n          style={{\n            height: sortHeight,\n            width: sortWidth + \"%\",\n            padding: sortPadding,\n\n            display: countingDisplay ? \"block\" : \"none\",\n          }}\n          className=\"countingSort\"\n        >\n          <CountingSort\n            margin=\"auto\"\n            speed={Speed}\n            display={countingDisplay}\n            height={sortHeight}\n            randomArray={mainArr}\n            start={isTrue}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./css/Sort.css\";\r\nimport Bar from \"./components/Bar\";\r\n\r\nfunction CountingSort(props) {\r\n  let randomArr = [...props.randomArray];\r\n  let countingArray = [...randomArr];\r\n  let speedSort = 1000;\r\n\r\n  const [iteratorA , setIteratorA] = useState();\r\n  const [iteratorB , setIteratorB] = useState();\r\n\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const [isTrue, setIsTrue] = useState(false);\r\n\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async function countingSort(arr) {\r\n    var max = Math.max(...arr);\r\n    var min = Math.min(...arr);\r\n    var i = min,\r\n      j = 0,\r\n      len = arr.length,\r\n      count = [];\r\n    for (i; i <= max; i++) {\r\n      count[i] = 0;\r\n    }\r\n    for (i = 0; i < len; i++) {\r\n      count[arr[i]] += 1;\r\n    }\r\n    for (i = min; i <= max; i++) {\r\n      while (count[i] > 0) {\r\n        arr[j] = i;\r\n        j++;\r\n        count[i]--;\r\n        await sleep(speedSort);\r\n        setIteratorA(i);\r\n        setIteratorB(j);  \r\n        setItems([...arr]);\r\n      }\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  useEffect(() => {\r\n    randomArr = [...props.randomArray];\r\n    countingArray = [...randomArr];\r\n\r\n    setItems([...randomArr]);\r\n  }, [props.randomArray, isTrue]);\r\n\r\n  useEffect(() => {\r\n    if ((props.start == true)&& (props.display == true)) {\r\n      speedSort /= props.speed;\r\n\r\n      countingSort(countingArray);\r\n    }\r\n  }, [props.start]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: props.margin,\r\n      }}\r\n      className=\"Box\"\r\n    >\r\n      <h4 className=\"Title\"> Counting Sort</h4>\r\n\r\n      <div\r\n        style={{\r\n          height: props.height + \"px\",\r\n        }}\r\n        className=\"Column\"\r\n      >\r\n        {items.map((progress,index) => (\r\n          <Bar color = {(index===iteratorA || index===iteratorB) ? 'red' : 'blue'}  height={progress} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountingSort;\r\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}